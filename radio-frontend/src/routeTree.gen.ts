/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpeakerImport } from './routes/speaker'
import { Route as ListenerImport } from './routes/listener'
import { Route as IndexImport } from './routes/index'
import { Route as SpeakerLanguageImport } from './routes/speaker_.$language'
import { Route as ListenerLanguageImport } from './routes/listener_.$language'

// Create/Update Routes

const SpeakerRoute = SpeakerImport.update({
  id: '/speaker',
  path: '/speaker',
  getParentRoute: () => rootRoute,
} as any)

const ListenerRoute = ListenerImport.update({
  id: '/listener',
  path: '/listener',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SpeakerLanguageRoute = SpeakerLanguageImport.update({
  id: '/speaker_/$language',
  path: '/speaker/$language',
  getParentRoute: () => rootRoute,
} as any)

const ListenerLanguageRoute = ListenerLanguageImport.update({
  id: '/listener_/$language',
  path: '/listener/$language',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/listener': {
      id: '/listener'
      path: '/listener'
      fullPath: '/listener'
      preLoaderRoute: typeof ListenerImport
      parentRoute: typeof rootRoute
    }
    '/speaker': {
      id: '/speaker'
      path: '/speaker'
      fullPath: '/speaker'
      preLoaderRoute: typeof SpeakerImport
      parentRoute: typeof rootRoute
    }
    '/listener_/$language': {
      id: '/listener_/$language'
      path: '/listener/$language'
      fullPath: '/listener/$language'
      preLoaderRoute: typeof ListenerLanguageImport
      parentRoute: typeof rootRoute
    }
    '/speaker_/$language': {
      id: '/speaker_/$language'
      path: '/speaker/$language'
      fullPath: '/speaker/$language'
      preLoaderRoute: typeof SpeakerLanguageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/listener': typeof ListenerRoute
  '/speaker': typeof SpeakerRoute
  '/listener/$language': typeof ListenerLanguageRoute
  '/speaker/$language': typeof SpeakerLanguageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/listener': typeof ListenerRoute
  '/speaker': typeof SpeakerRoute
  '/listener/$language': typeof ListenerLanguageRoute
  '/speaker/$language': typeof SpeakerLanguageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/listener': typeof ListenerRoute
  '/speaker': typeof SpeakerRoute
  '/listener_/$language': typeof ListenerLanguageRoute
  '/speaker_/$language': typeof SpeakerLanguageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/listener'
    | '/speaker'
    | '/listener/$language'
    | '/speaker/$language'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/listener'
    | '/speaker'
    | '/listener/$language'
    | '/speaker/$language'
  id:
    | '__root__'
    | '/'
    | '/listener'
    | '/speaker'
    | '/listener_/$language'
    | '/speaker_/$language'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListenerRoute: typeof ListenerRoute
  SpeakerRoute: typeof SpeakerRoute
  ListenerLanguageRoute: typeof ListenerLanguageRoute
  SpeakerLanguageRoute: typeof SpeakerLanguageRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListenerRoute: ListenerRoute,
  SpeakerRoute: SpeakerRoute,
  ListenerLanguageRoute: ListenerLanguageRoute,
  SpeakerLanguageRoute: SpeakerLanguageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/listener",
        "/speaker",
        "/listener_/$language",
        "/speaker_/$language"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/listener": {
      "filePath": "listener.tsx"
    },
    "/speaker": {
      "filePath": "speaker.tsx"
    },
    "/listener_/$language": {
      "filePath": "listener_.$language.tsx"
    },
    "/speaker_/$language": {
      "filePath": "speaker_.$language.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
